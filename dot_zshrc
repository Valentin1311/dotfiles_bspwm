#alias cat="batcat" # If you come from bash you might have to change your $PATH.
# # export PATH=$HOME/bin:/usr/local/bin:$PATH

# # Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
export _JAVA_AWT_WM_NONREPARENTING=1

# # Set name of the theme to load --- if set to "random", it will
# # load a random theme each time oh-my-zsh is loaded, in which case,
# # to know which specific one was loaded, run: echo $RANDOM_THEME
# # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="spaceship"
eval "$(starship init zsh)"

# # Set list of themes to pick from when loading at random
# # Setting this variable when ZSH_THEME=random will cause zsh to load
# # a theme from this variable instead of looking in $ZSH/themes/
# # If set to an empty array, this variable will have no effect.
# # ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# # Uncomment the following line to use case-sensitive completion.
# # CASE_SENSITIVE="true"

# # Uncomment the following line to use hyphen-insensitive completion.
# # Case-sensitive completion must be off. _ and - will be interchangeable.
# # HYPHEN_INSENSITIVE="true"

# # Uncomment one of the following lines to change the auto-update behavior
# # zstyle ':omz:update' mode disabled  # disable automatic updates
# # zstyle ':omz:update' mode auto      # update automatically without asking
# # zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# # Uncomment the following line to change how often to auto-update (in days).
# # zstyle ':omz:update' frequency 13

# # Uncomment the following line if pasting URLs and other text is messed up.
# # DISABLE_MAGIC_FUNCTIONS="true"

# # Uncomment the following line to disable colors in ls.
# # DISABLE_LS_COLORS="true"

# # Uncomment the following line to disable auto-setting terminal title.
# # DISABLE_AUTO_TITLE="true"

# # Uncomment the following line to enable command auto-correction.
# # ENABLE_CORRECTION="true"

# # Uncomment the following line to display red dots whilst waiting for completion.
# # You can also set it to another string to have that shown instead of the default red dots.
# # e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# # Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# # COMPLETION_WAITING_DOTS="true"

# # Uncomment the following line if you want to disable marking untracked files
# # under VCS as dirty. This makes repository status check for large repositories
# # much, much faster.
# # DISABLE_UNTRACKED_FILES_DIRTY="true"

# # Uncomment the following line if you want to change the command execution time
# # stamp shown in the history command output.
# # You can set one of the optional three formats:
# # "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# # or set a custom format using the strftime function format specifications,
# # see 'man strftime' for details.
# # HIST_STAMPS="mm/dd/yyyy"

# # Would you like to use another custom folder than $ZSH/custom?
# # ZSH_CUSTOM=/path/to/new-custom-folder

# # Which plugins would you like to load?
# # Standard plugins can be found in $ZSH/plugins/
# # Custom plugins may be added to $ZSH_CUSTOM/plugins/
# # Example format: plugins=(rails git textmate ruby lighthouse)
# # Add wisely, as too many plugins slow down shell startup.
plugins=(git npm yarn aws colored-man-pages colorize command-not-found common-aliases docker docker-compose kubectl zsh-autosuggestions history zsh-syntax-highlighting emoji pip copybuffer dotenv)

source $ZSH/oh-my-zsh.sh
source setup_env_helm_stratumn.sh

# # User configuration

# # export MANPATH="/usr/local/man:$MANPATH"

# Man pages using neovim
export MANPAGER='nvim +Man!'

# # You may need to manually set your language environment
# # export LANG=en_US.UTF-8

# # Preferred editor for local and remote sessions
# # if [[ -n $SSH_CONNECTION ]]; then
# #   export EDITOR='vim'
# # else
# #   export EDITOR='mvim'
# # fi

# # Compilation flags
# # export ARCHFLAGS="-arch x86_64"

# # Set personal aliases, overriding those provided by oh-my-zsh libs,
# # plugins, and themes. Aliases can be placed here, though oh-my-zsh
# # users are encouraged to define aliases within the ZSH_CUSTOM folder.
# # For a full list of active aliases, run `alias`.
# #
# # Example aliases
# # alias zshconfig="mate ~/.zshrc"
# # alias ohmyzsh="mate ~/.oh-my-zsh"

# Only for minikube
# alias kubectl="minikube kubectl --"

# #Git Configuration

# # Stratumn Configuration
export SU_PASSWORD=adminpass

# # Kube Configuration
# export KUBE_EDITOR="code -w"
export KUBE_EDITOR="nvim"
export EDITOR="nvim"

alias giphon="/usr/bin/env python3 -m giphon"

# # Load Angular CLI autocompletion.
# # source <(ng completion script)

export PATH="/opt/nvim-linux64/bin:$JAVA_HOME/bin:/usr/local/aws-cli/v2/2.15.40/bin:~/.kubectx:${KREW_ROOT:-$HOME/.krew}/bin:/home/linuxbrew/.linuxbrew/opt/postgresql@11/bin:$PATH"

# # Pywal theme
# (cat ~/.cache/wal/sequences &)

# # tabtab source for serverless package
# # uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /home/valentin/stratumn/platform/backend/notification-api/node_modules/tabtab/.completions/serverless.zsh ]] && . /home/valentin/stratumn/platform/backend/notification-api/node_modules/tabtab/.completions/serverless.zsh
# # tabtab source for sls package
# # uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /home/valentin/stratumn/platform/backend/notification-api/node_modules/tabtab/.completions/sls.zsh ]] && . /home/valentin/stratumn/platform/backend/notification-api/node_modules/tabtab/.completions/sls.zsh

vpn() {
  cd $HOME/stratumn/platform/infrastructure/scripts
  bash vpn.sh
}

ssm() {
  cd $HOME/stratumn/platform/infrastructure/scripts
  bash ssm.sh
}

goo() {
  case "$1" in
    stratumn|strat|s)
      cd $HOME/stratumn
      ;;
    mono|m)
      cd $HOME/stratumn/platform/stratumn
      ;;
    backend|back|b)
      cd $HOME/stratumn/platform/backend
      ;;
    frontend|front|f)
      cd $HOME/stratumn/platform/frontend
      ;;
    home|h|~)
      cd $HOME
      ;;
    onboarding|o)
      cd $HOME/stratumn/platform/misc/launcher
      ;;
    configuration|config|c)
      cd $HOME/stratumn/configuration
      ;;
    "")
      cd $HOME/stratumn
      ;;
    *)  # default case for unrecognized parameters
      if [ -d "$1" ]; then
        cd "$1"
      elif [ -d "$HOME/stratumn/platform/backend/$1" ]; then
        cd "$HOME/stratumn/platform/backend/$1"
      elif [ -d "$HOME/stratumn/platform/frontend/$1" ]; then
        cd "$HOME/stratumn/platform/frontend/$1"
      elif [ -d "$HOME/stratumn/configuration/$1" ]; then
        cd "$HOME/stratumn/configuration/$1"
      elif [ -d "$HOME/stratumn/platform/kubernetes/$1" ]; then
        cd "$HOME/stratumn/platform/kubernetes/$1"
      elif [ -d "$HOME/stratumn/platform/infrastructure/$1" ]; then
        cd "$HOME/stratumn/platform/infrastructure/$1"
      elif [ -d "$HOME/stratumn/platform/tools/$1" ]; then
        cd "$HOME/stratumn/platform/tools/$1"
      else
        cd $HOME/stratumn
      fi
      ;;
  esac
}

op() {
  case "$1" in
    mono|m)
      cd $HOME/stratumn/platform/stratumn && cursor .
      ;;
    *)  # default case for unrecognized parameters
      if [ -d "$1" ]; then
        cd "$1" && cursor .
      elif [ -d "$HOME/stratumn/platform/backend/$1" ]; then
        cd "$HOME/stratumn/platform/backend/$1" && cursor .
      elif [ -d "$HOME/stratumn/platform/frontend/$1" ]; then
        cd "$HOME/stratumn/platform/frontend/$1" && cursor .
      elif [ -d "$HOME/stratumn/configuration/$1" ]; then
        cd "$HOME/stratumn/configuration/$1" && cursor .
      elif [ -d "$HOME/stratumn/platform/kubernetes/$1" ]; then
        cd "$HOME/stratumn/platform/kubernetes/$1" && cursor .
      elif [ -d "$HOME/stratumn/platform/infrastructure/$1" ]; then
        cd "$HOME/stratumn/platform/infrastructure/$1" && cursor .
      elif [ -d "$HOME/stratumn/platform/tools/$1" ]; then
        cd "$HOME/stratumn/platform/tools/$1" && cursor .
      else
        cd $HOME
      fi
      ;;
  esac
}

opv() {
  case "$1" in
    mono|m)
      cd $HOME/stratumn/platform/stratumn && nvim .
      ;;
    *)  # default case for unrecognized parameters
      if [ -d "$1" ]; then
        cd "$1" && nvim .
      elif [ -d "$HOME/stratumn/platform/backend/$1" ]; then
        cd "$HOME/stratumn/platform/backend/$1" && nvim .
      elif [ -d "$HOME/stratumn/platform/frontend/$1" ]; then
        cd "$HOME/stratumn/platform/frontend/$1" && nvim .
      elif [ -d "$HOME/stratumn/configuration/$1" ]; then
        cd "$HOME/stratumn/configuration/$1" && nvim .
      elif [ -d "$HOME/stratumn/platform/kubernetes/$1" ]; then
        cd "$HOME/stratumn/platform/kubernetes/$1" && nvim .
      elif [ -d "$HOME/stratumn/platform/infrastructure/$1" ]; then
        cd "$HOME/stratumn/platform/infrastructure/$1" && nvim .
      elif [ -d "$HOME/stratumn/platform/tools/$1" ]; then
        cd "$HOME/stratumn/platform/tools/$1" && nvim .
      else
        cd $HOME
      fi
      ;;
  esac
}

# eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# # Dagger shell autocompletion
# autoload -U compinit
# compinit -i


# pnpm
export PNPM_HOME="/home/valentin/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# fnm
FNM_PATH="/home/valentin/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="/home/valentin/.local/share/fnm:$PATH"
  eval "`fnm env`"
fi

#GO
export PATH=$PATH:/usr/local/go/bin

# This alias runs the Cursor Setup Wizard, simplifying installation and configuration.
# For more details, visit: https://github.com/jorcelinojunior/cursor-setup-wizard
alias cursor-setup="/home/valentin/cursor-setup-wizard/cursor_setup.sh"

# #My aliases
alias k="kubectl"
alias kgp="kubectl get pods"
alias ktx="kubectl ctx"
alias kns="kubectl ns"
alias pn="pnpm"
alias do="docker"
alias v="nvim"
alias bat="batcat"
alias cat="batcat"
alias find="fd"
alias ls="exa -alh"
